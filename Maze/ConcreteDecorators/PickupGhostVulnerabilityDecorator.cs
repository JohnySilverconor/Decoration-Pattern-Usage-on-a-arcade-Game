using MazeLib;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Maze
{
    public class PickupGhostVulnerabilityDecorator : PickupDecorator<PictureBox>
    {
        private IEnumerable<AbstractGhost<PictureBox>> _ghostsAffected;
        private static Timer _vurneabilityTimer;
        private static Timer _nearInvurneabilityTimer;
        private Image _previousGhostImage;
        private Color _previousGhostBackColor;

        public PickupGhostVulnerabilityDecorator(AbstractPickup<PictureBox> pickupToDecorate,
            IEnumerable<AbstractGhost<PictureBox>> ghostsAffected)
            : base(pickupToDecorate)
        {
            if (ghostsAffected == null)
            {
                throw new ArgumentNullException("ghostsAffected");
            }

            if (ghostsAffected.Count() > 0)
            {
                _previousGhostBackColor = ghostsAffected.ElementAt(0).Display.BackColor;
                _previousGhostImage = ghostsAffected.ElementAt(0).Display.Image;
            }

            _ghostsAffected = ghostsAffected;
        }

        public Timer VurneabilityTimer
        {
            get
            {
                if (_vurneabilityTimer == null)
                {
                    _vurneabilityTimer = new Timer();
                    _vurneabilityTimer.Interval = 5000;
                }

                return _vurneabilityTimer;
            }
            set
            {
                _vurneabilityTimer = value;
            }
        }

        public Timer NearInvurneabilityTimer
        {
            get
            {
                if (_nearInvurneabilityTimer == null)
                {
                    _nearInvurneabilityTimer = new Timer();
                    _nearInvurneabilityTimer.Interval = 4000;
                }

                return _nearInvurneabilityTimer;
            }
            set
            {
                _nearInvurneabilityTimer = value;
            }
        }

        public override bool IsEaten
        {
            get
            {
                return _pickupToDecorate.IsEaten;
            }
            set
            {
                if (IsFruit && value)
                {
                    if (NearInvurneabilityTimer != null)
                    {
                        NearInvurneabilityTimer.Dispose();
                        NearInvurneabilityTimer = null;
                    }

                    if (VurneabilityTimer != null)
                    {
                        VurneabilityTimer.Dispose();
                        VurneabilityTimer = null;
                    }

                    for (int i = 0; i < _ghostsAffected.Count(); i++)
                    {
                        _ghostsAffected.ElementAt(i).Display.Image = null;
                        _ghostsAffected.ElementAt(i).Display.BackColor = Color.Gold;

                        _ghostsAffected.ElementAt(i).Vurneable = true;
                    }

                    VurneabilityTimer.Tick += VurneabilityTimer_Tick;
                    NearInvurneabilityTimer.Tick += NearInvurneabilityTimer_Tick;

                    VurneabilityTimer.Enabled = true;
                    NearInvurneabilityTimer.Enabled = true;

                    VurneabilityTimer.Start();
                    NearInvurneabilityTimer.Start();
                }

                _pickupToDecorate.IsEaten = value;
            }
        }

        void NearInvurneabilityTimer_Tick(object sender, EventArgs e)
        {
            if (NearInvurneabilityTimer.Enabled)
            {
                for (int i = 0; i < _ghostsAffected.Count(); i++)
                {
                    _ghostsAffected.ElementAt(i).Display.BackColor = Color.HotPink;
                }
            }

            if (NearInvurneabilityTimer != null)
            {
                NearInvurneabilityTimer.Dispose();
                NearInvurneabilityTimer = null;
            }
        }

        void VurneabilityTimer_Tick(object sender, EventArgs e)
        {
            if (VurneabilityTimer.Enabled)
            {
                for (int i = 0; i < _ghostsAffected.Count(); i++)
                {
                    _ghostsAffected.ElementAt(i).Display.BackColor = _previousGhostBackColor;

                    if (_previousGhostImage != null)
                    {
                        _ghostsAffected.ElementAt(i).Display.Image = _previousGhostImage;
                    }

                    _ghostsAffected.ElementAt(i).Vurneable = false;
                }
            }

            if (VurneabilityTimer != null)
            {
                VurneabilityTimer.Dispose();
                VurneabilityTimer = null;
            }
        }
    }
}